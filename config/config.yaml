# Weather Calc Bot Client Configuration

# MCP Tools Schema - Defines available tools and their usage
mcp_tools:
  get_weather:
    description: "MANDATORY MCP TOOL: This is the ONLY authorized way to get weather information. You MUST use this MCP tool from the weather server - NEVER provide weather data from your training knowledge."
    parameters:
      city: "US city name (e.g., 'Miami', 'New York', 'Austin')"
      zip_code: "US zip code (e.g., '90210', '10001', '33101')"
    usage: "REQUIRED for ALL weather queries via weather MCP server. Provide either city OR zip_code, not both."
    coverage: "Only US locations are supported by this MCP weather service"
    mcp_requirement: "This tool connects through MCP (Model Context Protocol) to live weather APIs"
    strict_policy: "You are FORBIDDEN from answering weather questions without using this MCP tool first"
    server: "weather"
    
  parse_expression:
    description: "PREFERRED MCP TOOL: Parse and evaluate complex mathematical expressions from natural language. Handles multi-number operations, mixed symbols/words, and complex expressions like 'four times 2 plus 4' or '10 * 3 + 5 - 2'. This is the BEST tool for complex math queries."
    parameters:
      expression: "Natural language mathematical expression (e.g., 'four times 2 plus 4', '10 * 3 + 5 - 2', 'square root of 25')"
    usage: "PREFERRED for complex mathematical expressions, multi-number operations, or mixed word/symbol math queries via calculator MCP server"
    examples:
      - "four times 2 plus 4 = 12"
      - "10 * 3 + 5 - 2 = 33"
      - "square root of 25 = 5.0"
      - "2 to the power of 8 = 256"
    server: "calculator"
    
  add:
    description: "MCP TOOL: Add multiple numbers together. Can handle 2 or more numbers."
    parameters:
      numbers: "List of numbers to add (e.g., [16384, 86413] or [1, 2, 3, 4])"
    usage: "For simple addition of multiple numbers via calculator MCP server"
    examples:
      - "16384 + 86413 = 102797"
      - "1 + 2 + 3 + 4 = 10"
    server: "calculator"
    
  subtract:
    description: "MCP TOOL: Subtract numbers. First number minus all subsequent numbers."
    parameters:
      minuend: "The number to subtract from"
      subtrahends: "List of numbers to subtract (e.g., [25] or [10, 5, 2])"
    usage: "For subtraction operations via calculator MCP server"
    examples:
      - "100 - 25 = 75"
      - "100 - 10 - 5 - 2 = 83"
    server: "calculator"
    
  multiply:
    description: "MCP TOOL: Multiply multiple numbers together. Can handle 2 or more numbers."
    parameters:
      numbers: "List of numbers to multiply (e.g., [12, 8] or [2, 3, 4])"
    usage: "For multiplication of multiple numbers via calculator MCP server"
    examples:
      - "12 * 8 = 96"
      - "2 * 3 * 4 = 24"
    server: "calculator"
    
  divide:
    description: "MCP TOOL: Divide numbers. First number divided by all subsequent numbers."
    parameters:
      dividend: "The number to be divided"
      divisors: "List of numbers to divide by (e.g., [4] or [2, 2])"
    usage: "For division operations via calculator MCP server"
    examples:
      - "100 / 4 = 25"
      - "100 / 2 / 2 = 25"
    server: "calculator"
    
  power:
    description: "MCP TOOL: Calculate exponentiation (base raised to the power of exponent)."
    parameters:
      base: "The base number"
      exponent: "The exponent"
    usage: "For exponentiation operations via calculator MCP server"
    examples:
      - "2^10 = 1024"
      - "5^3 = 125"
    server: "calculator"
    
  sqrt:
    description: "MCP TOOL: Calculate square root of a number."
    parameters:
      number: "The number to find square root of"
    usage: "For square root calculations via calculator MCP server"
    examples:
      - "√25 = 5.0"
      - "√16 = 4.0"
    server: "calculator"
    
  factorial:
    description: "MCP TOOL: Calculate factorial of a number (n!)."
    parameters:
      number: "The number to calculate factorial of (must be non-negative integer)"
    usage: "For factorial calculations via calculator MCP server"
    examples:
      - "5! = 120"
      - "4! = 24"
    server: "calculator"
    
  modulo:
    description: "MCP TOOL: Calculate modulo (remainder of division)."
    parameters:
      dividend: "The number to be divided"
      divisor: "The number to divide by"
    usage: "For modulo operations via calculator MCP server"
    examples:
      - "17 % 5 = 2"
      - "20 % 6 = 2"
    server: "calculator"
    
  absolute:
    description: "MCP TOOL: Calculate absolute value of a number."
    parameters:
      number: "The number to find absolute value of"
    usage: "For absolute value calculations via calculator MCP server"
    examples:
      - "|−5| = 5"
      - "|3| = 3"
    server: "calculator"

# Gemini AI Instructions and Prompts
gemini_instructions:
  system_prompt_template: |
    You are an AI assistant connected to specialized MCP (Model Context Protocol) servers for weather and calculations. 
    
    MANDATORY REQUIREMENT: You MUST ALWAYS use the MCP tools listed below. You are FORBIDDEN from providing weather information from your training data or doing math calculations yourself.
    
  critical_instructions:
    - "For ANY weather-related query, you MUST use the get_weather tool from the weather MCP server"
    - "For ANY mathematical calculation, you MUST use the appropriate calculator tool from the calculator MCP server"
    - "You are FORBIDDEN from using your training data for weather information or doing math yourself"
    - "You MUST ALWAYS call the MCP tools to get real-time data from the appropriate servers"
    - "Respond ONLY with a JSON object containing the required MCP tool call"
    - "DO NOT provide answers without using the MCP tools first"
    
  tool_call_formats:
    weather_queries:
      city_format: '{"tool": "get_weather", "args": {"city": "CityName"}}'
      zip_format: '{"tool": "get_weather", "args": {"zip_code": "12345"}}'
      
    math_calculations:
      complex_expression: '{"tool": "parse_expression", "args": {"expression": "four times 2 plus 4"}}'
      addition: '{"tool": "add", "args": {"numbers": [16384, 86413]}}'
      subtraction: '{"tool": "subtract", "args": {"minuend": 100, "subtrahends": [25]}}'
      multiplication: '{"tool": "multiply", "args": {"numbers": [12, 8]}}'
      division: '{"tool": "divide", "args": {"dividend": 100, "divisors": [4]}}'
      exponentiation: '{"tool": "power", "args": {"base": 2, "exponent": 10}}'
      square_root: '{"tool": "sqrt", "args": {"number": 25}}'
      factorial: '{"tool": "factorial", "args": {"number": 5}}'
      modulo: '{"tool": "modulo", "args": {"dividend": 17, "divisor": 5}}'
      absolute_value: '{"tool": "absolute", "args": {"number": -5}}'
      
    non_supported_query: '{"error": "I can only help with weather information (US cities/zip codes) or mathematical calculations using my MCP tools."}'
    
  examples:
    weather:
      - input: "What's the weather in Boston?"
        output: '{"tool": "get_weather", "args": {"city": "Boston"}}'
      - input: "How's the weather in 90210?"
        output: '{"tool": "get_weather", "args": {"zip_code": "90210"}}'
      - input: "Is it raining in Miami?"
        output: '{"tool": "get_weather", "args": {"city": "Miami"}}'
        
    math:
      - input: "What is 16384 + 86413?"
        output: '{"tool": "add", "args": {"numbers": [16384, 86413]}}'
      - input: "Calculate 100 - 25"
        output: '{"tool": "subtract", "args": {"minuend": 100, "subtrahends": [25]}}'
      - input: "What's 12 times 8?"
        output: '{"tool": "multiply", "args": {"numbers": [12, 8]}}'

# Client Response Messages and Constants
client_messages:
  # Error and status messages
  error_messages:
    no_weather_data: "No weather data received from the server."
    no_calculation_result: "No calculation result received from the server."
    empty_input: "Please specify a city or zip code for weather information or a mathematical calculation."
    safety_restriction: "I apologize, but I cannot process that request due to content safety restrictions. Please try rephrasing your question about weather or calculations."
    understanding_error: "I apologize, but I couldn't understand how to help with that request. Please ask about weather information (US cities/zip codes) or mathematical calculations."
    processing_error: "I apologize, but I had trouble processing that request. Please ask about weather information (US cities/zip codes) or mathematical calculations."
    gemini_not_configured: "Gemini model is not configured. Please check your GOOGLE_API_KEY."
    safety_fallback_help: "I had trouble processing your request about '{user_input}'. This seems like a harmless weather or math question. Please try asking: 'What's the weather in [city name]?' or 'Calculate [math expression]'."
    reactions_read_missing: "Cannot check reactions - missing 'reactions:read' scope. Please add this scope to your Slack app."
    reactions_write_missing: "Cannot add reaction - missing 'reactions:write' scope. Please add this scope to your Slack app."
    reaction_already_exists: "Reaction already exists on message {message_ts}"
    invalid_reaction_name: "Invalid reaction name 'white_check_mark' for message {message_ts}"
    reaction_failed: "Failed to add reaction to message {message_ts}: {error}"
    thread_check_failed: "Failed to get thread replies for message {message_ts}: {error}"
    thread_error: "Error checking thread replies for message {message_ts}: {error}"
    
  # Response format messages
  response_messages:
    weather_prefix: "Weather for"
    temperature_label: "Temperature:"
    conditions_label: "Conditions:"
    result_prefix: "The result is:"
    generic_result: "Result:"
    weather_data_fallback: "Weather data:"
    
  # Tool categories and arrays
  tool_categories:
    calculator_tools:
      - "add"
      - "subtract" 
      - "multiply"
      - "divide"
      - "power"
      - "sqrt"
      - "factorial"
      - "modulo"
      - "absolute"
      - "parse_expression"
      
    weather_tools:
      - "get_weather"
      
    all_calculator_tools: # For easy reference in code
      - "add"
      - "subtract"
      - "multiply"
      - "divide" 
      - "power"
      - "sqrt"
      - "factorial"
      - "modulo"
      - "absolute"
      - "parse_expression"

  # Fallback system configuration
  fallback_prompts:
    simple_prompt_template: |
      Convert this to a tool call:

      {user_input}

      If it's about weather, respond: {{"tool": "get_weather", "args": {{"city": "CITYNAME"}}}}
      If it's math like "four times two", respond: {{"tool": "parse_expression", "args": {{"expression": "four times two"}}}}

      JSON response:
      
  # Pattern matching fallback configuration
  pattern_matching:
    math_patterns:
      - "times"
      - "plus"
      - "minus"
      - "divided"
      - "multiply"
      - "add"
      - "subtract"
      - "+"
      - "-"
      - "*"
      - "/"
      - "calculate"
      - "what is"
      - "equals"
      - "="
      - "sum"
      - "difference"
      - "product"
      - "quotient"
      - "squared"
      - "square root"
      - "factorial"
      - "power"
      - "^"
      
    weather_patterns:
      - "weather"
      - "temperature"
      - "forecast"
      - "raining"
      - "sunny"
      - "cloudy"
      
    cleanup_prefixes:
      - "hey"
      - "what is"
      - "calculate"
      - "compute"
      - "what's"
      - "whats"
      - "solve"
      - "find"
      - "tell me"
      - "can you"
      - "please"
      
    skip_words:
      - "hey"
      - "weather"
      - "bot"
      - "what"
      - "is"
      - "the"
      - "in"
      - "at"
      - "for"

# Gemini AI Configuration
gemini_config:
  # Generation configuration
  generation_config:
    temperature: 0.1
    top_p: 0.95
    top_k: 40
    max_output_tokens: 2048
    candidate_count: 1
    
  # Safety settings - threshold levels: BLOCK_NONE, BLOCK_ONLY_HIGH, BLOCK_MEDIUM_AND_ABOVE, BLOCK_LOW_AND_ABOVE
  safety_settings:
    - category: "HARM_CATEGORY_HARASSMENT"
      threshold: "BLOCK_ONLY_HIGH"
    - category: "HARM_CATEGORY_HATE_SPEECH"
      threshold: "BLOCK_ONLY_HIGH"
    - category: "HARM_CATEGORY_SEXUALLY_EXPLICIT"
      threshold: "BLOCK_ONLY_HIGH"
    - category: "HARM_CATEGORY_DANGEROUS_CONTENT"
      threshold: "BLOCK_ONLY_HIGH"

# Location Extraction Configuration
location_extraction:
  # Stop words to filter out when extracting locations
  stop_words:
    - weather
    - forecast
    - temperature
    - temp
    - conditions
    - condition
    - what
    - whats
    - "what's"
    - how
    - hows
    - "how's"
    - is
    - are
    - the
    - it
    - like
    - there
    - today
    - now
    - right
    - currently
    - outside
    - in
    - at
    - for
    - on
    - about
    - around
    - near
    - by
    - to
    - of
    - hot
    - cold
    - warm
    - cool
    - sunny
    - rainy
    - cloudy
    - snowy
    - degrees
    - fahrenheit
    - celsius
    - humid
    - dry
    - windy
    - good
    - bad
    - nice
    - terrible
    - great
    - awful
    - beautiful
    - this
    - that
    - these
    - those
    - some
    - any
    - all
    - much
    - very
    - really
    - quite
    - pretty
    - so
    - too
    - enough
    - amazing
    - wonderful
    - lovely
    - fantastic
    - destination
    - city
    - place
    - country
    - pack
    - bring
    - take
    - need
    - clothes
    - clothing
    - gear
    - items
    - travel
    - trip
    - visit
    - go
    - going
    - do
    - i
    - my
    - upcoming

  # Unwanted words to remove during location cleaning
  unwanted_words:
    - Weather
    - Forecast
    - Temperature
    - Like
    - Right
    - Now
    - Today
    - Currently
    - Outside
    - There
    - This
    - That
    - Very
    - Really
    - Quite
    - Pretty
    - So
    - Too
    - Much
    - All
    - Some
    - Any
    - Amazing
    - Beautiful
    - Wonderful
    - Lovely
    - Great
    - Fantastic
    - Destination
    - City
    - Place
    - Country
    - Of
    - The

  # Regex patterns for location extraction (ordered by priority)
  patterns:
    # Direct weather queries
    - name: "weather_location"
      pattern: '(?:weather|forecast|temperature|conditions?|like|hot|cold|sunny|rainy)\s+(?:in|at|for)\s+([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "weather in Baltimore, how's it in Miami"
    
    # Location + weather
    - name: "location_weather"
      pattern: '([a-zA-ZÀ-ÿ\s]+?)\s+(?:weather|forecast|temperature|conditions?)'
      description: "Baltimore weather, Miami forecast"
    
    # Conversational queries
    - name: "conversational"
      pattern: '(?:how''?s|what''?s|about)\s+([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "how's Baltimore, what about Miami"
    
    # Time-based queries
    - name: "time_based"
      pattern: '(?:now|today|currently|right\s+now)\s+(?:in|at|for)\s+([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "right now in Baltimore"
    
    # Clothing/gear questions
    - name: "clothing_gear"
      pattern: '(?:umbrella|jacket|coat|shorts|boots|hat|sunglasses|sunscreen)\s+.*?(?:in|at|for)\s+([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "umbrella/jacket/coat in New York"
    
    # Commute questions
    - name: "commute"
      pattern: '(?:walk|drive|bike|commute|travel|go).*?(?:work|school|home|office).*?(?:in|at|to)\s+([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "walk/drive/bike to work in New York"
    
    # Travel/packing questions with descriptive phrases
    - name: "travel_packing"
      pattern: '(?:pack|bring|take|need).*?(?:clothes|clothing|gear|items?).*?(?:travel|trip|visit|go|going).*?(?:to|in|at)\s+(?:the\s+)?(?:amazing\s+|beautiful\s+|wonderful\s+)?(?:destination\s+of\s+|city\s+of\s+|place\s+of\s+)?([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "pack...clothes for travel to Alaska"
    
    # Travel queries with descriptive phrases
    - name: "travel_descriptive"
      pattern: '(?:travel|trip|visit|vacation|journey|going?).*?(?:to|in|at)\s+(?:the\s+)?(?:amazing\s+|beautiful\s+|wonderful\s+)?(?:destination\s+of\s+|city\s+of\s+|place\s+of\s+)?([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "travel to Alaska, trip to Paris, visit to Tokyo"
    
    # General destination pattern with descriptive phrases
    - name: "destination_descriptive"
      pattern: '.*?(?:to)\s+(?:the\s+)?(?:amazing\s+|beautiful\s+|wonderful\s+|lovely\s+|great\s+|fantastic\s+)?(?:destination\s+of\s+|city\s+of\s+|place\s+of\s+|country\s+of\s+)?([a-zA-ZÀ-ÿ][a-zA-ZÀ-ÿ\s]{1,30})(?:\s*[?.!]|$)'
      description: "General 'to [location]' pattern with descriptive phrases"
    
    # General location pattern
    - name: "general_location"
      pattern: '.*?(?:in|at|for)\s+([a-zA-ZÀ-ÿ][a-zA-ZÀ-ÿ\s]{1,30})(?:\s*[?.!]|$)'
      description: "General 'in [location]' pattern for complex sentences"
    
    # Simple location pattern
    - name: "simple_location"
      pattern: '(?:^|\s)(?:in|at|for|to)\s+([a-zA-ZÀ-ÿ\s]+?)(?:\s*[?.!]|$)'
      description: "Simple 'in Baltimore' or 'at Miami'"
